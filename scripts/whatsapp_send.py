import pandas as pd
from openai import OpenAI
import openai
import pywhatkit
import time
import requests
from datetime import datetime
import os
from dotenv import load_dotenv

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=openai.api_key)

class WhatsAppCampaign:
    def __init__(self, csv_file):
        self.csv_file = csv_file
        self.df = None

    def load_data(self):
        try:
            self.df = pd.read_csv(self.csv_file)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ CSV: {e}")
            return False

    def analyze_location(self, name, address):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –º–µ—Å—Ç–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–¥—Ä–µ—Å—É –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞:
        –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
        –ê–¥—Ä–µ—Å: {address}

        –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –æ–¥–Ω–æ —Å–ª–æ–≤–æ - —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞. –í–∞—Ä–∏–∞–Ω—Ç—ã:
        - –≥–ª—ç–º–ø–∏–Ω–≥
        - –æ—Ç–µ–ª—å
        - –∑–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞ 
        - –ø–∞—Ä–∫
        - –∫–∞—Ñ–µ
        - —Ä–µ—Å—Ç–æ—Ä–∞–Ω
        - —Ç—É—Ä–±–∞–∑–∞
        - –∫–µ–º–ø–∏–Ω–≥
        - —Å–∞–Ω–∞—Ç–æ—Ä–∏–π
        - –¥–æ–º –æ—Ç–¥—ã—Ö–∞
        - —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å
        - —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä
        - –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞
        - –º–æ—Ç–µ–ª—å
        - —Ö–æ—Å—Ç–µ–ª
        - –±–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞
        - –¥—Ä—É–≥–æ–µ

        –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –≤ –æ—Ç–≤–µ—Ç–µ!
        """

        try:
            response = openai.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "user", "content": prompt}
                ]
            )
            location_type = response.choices[0].message.content.strip().lower()
            return location_type
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–∫–∞—Ü–∏–∏: {e}")
            return "–º–µ—Å—Ç–æ"

    def generate_message(self, name, location_type, address):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI"""

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–æ–≤
        type_descriptions = {
            "–≥–ª—ç–º–ø–∏–Ω–≥": "–ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π –≥–ª—ç–º–ø–∏–Ω–≥",
            "–æ—Ç–µ–ª—å": "–ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –æ—Ç–µ–ª—å",
            "–∑–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞": "—É—é—Ç–Ω—É—é –∑–æ–Ω—É –æ—Ç–¥—ã—Ö–∞",
            "–ø–∞—Ä–∫": "–∫—Ä–∞—Å–∏–≤—ã–π –ø–∞—Ä–∫",
            "–∫–∞—Ñ–µ": "—É—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ",
            "—Ä–µ—Å—Ç–æ—Ä–∞–Ω": "–ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω",
            "—Ç—É—Ä–±–∞–∑–∞": "–æ—Ç–ª–∏—á–Ω—É—é —Ç—É—Ä–±–∞–∑—É",
            "–∫–µ–º–ø–∏–Ω–≥": "–∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –∫–µ–º–ø–∏–Ω–≥",
            "—Å–∞–Ω–∞—Ç–æ—Ä–∏–π": "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π —Å–∞–Ω–∞—Ç–æ—Ä–∏–π",
            "–¥–æ–º –æ—Ç–¥—ã—Ö–∞": "—É—é—Ç–Ω—ã–π –¥–æ–º –æ—Ç–¥—ã—Ö–∞",
            "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å": "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å",
            "—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä": "–ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä",
            "–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞": "–∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é –≥–æ—Å—Ç–∏–Ω–∏—Ü—É",
            "–º–æ—Ç–µ–ª—å": "—É–¥–æ–±–Ω—ã–π –º–æ—Ç–µ–ª—å",
            "—Ö–æ—Å—Ç–µ–ª": "—Å—Ç–∏–ª—å–Ω—ã–π —Ö–æ—Å—Ç–µ–ª",
            "–±–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞": "–ø—Ä–µ–∫—Ä–∞—Å–Ω—É—é –±–∞–∑—É –æ—Ç–¥—ã—Ö–∞",
            "–º–µ—Å—Ç–æ": "–≤–∞—à–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ",
            "–¥—Ä—É–≥–æ–µ": "–≤–∞—à –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç"
        }

        description = type_descriptions.get(location_type, "–≤–∞—à–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ")

        prompt = f"""
        –°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è WhatsApp –±–∏–∑–Ω–µ—Å—É. –¢–æ–Ω: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π.

        –î–∞–Ω–Ω—ã–µ:
        - –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
        - –¢–∏–ø: {description}
        - –ê–¥—Ä–µ—Å: {address}

        –®–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞:
        –ü—Ä–∏–≤–µ—Ç, [–ù–∞–∑–≤–∞–Ω–∏–µ]!
        –ú—ã –∑–∞–º–µ—Ç–∏–ª–∏ –≤–∞—à [—Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞] —Ä—è–¥–æ–º —Å [–∞–¥—Ä–µ—Å]. –í–∞—à–µ –º–µ—Å—Ç–æ —è–≤–Ω–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –±–æ–ª—å—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Ç—É—Ä–∏—Å—Ç–æ–≤!

        mytravel.kz ‚Äî —ç—Ç–æ —Ç–æ–ø–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ, –≥–¥–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
        ‚Ä¢ 10K+ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–∏—Å—Ç–æ–≤ –µ–∂–µ–º–µ—Å—è—á–Ω–æ
        ‚Ä¢ –õ—É—á—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–º–∏—É–º –æ–±—ä–µ–∫—Ç–æ–≤  
        ‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏

        –•–æ—Ç–∏–º –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –∫–∞—Ç–∞–ª–æ–≥. –ú–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?

        –°–ø–∞—Å–∏–±–æ,
        –ö–æ–º–∞–Ω–¥–∞ mytravel.kz

        –°–¥–µ–ª–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–¥ {description}. 
        –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞—Å—Ç–æ—è—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ "{name}" –∏ –∞–¥—Ä–µ—Å "{address} –Ω–æ postal code –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å, –ø—Ä–∏–º–µ—Ä 010000 —á—Ç–æ–±—ã –µ–≥–æ –Ω–µ –±—ã–ª–æ, –Ω–µ –¥–æ–±–∞–≤–ª—è–π".
        –ú–∞–∫—Å–∏–º—É–º 7-10 —Å—Ç—Ä–æ–∫.
        """

        try:
            response = openai.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "user", "content": prompt}
                ]
            )
            message = response.choices[0].message.content.strip()
            return message
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
            return f"""–ü—Ä–∏–≤–µ—Ç, {name}!
–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏ –≤–∞—à {description} —Ä—è–¥–æ–º —Å {address}. –í–∞—à–µ –º–µ—Å—Ç–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –±–æ–ª—å—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Ç—É—Ä–∏—Å—Ç–æ–≤!

mytravel.kz ‚Äî —Ç–æ–ø–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ —Å 10K+ —Ç—É—Ä–∏—Å—Ç–æ–≤ –µ–∂–µ–º–µ—Å—è—á–Ω–æ.

–•–æ—Ç–∏–º –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –∫–∞—Ç–∞–ª–æ–≥. –ú–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?

–ö–æ–º–∞–Ω–¥–∞ mytravel.kz"""

    def send_whatsapp_message(self, phone_number, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WhatsApp"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
            phone = self.format_phone_number(phone_number)
            if not phone:
                print(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä: {phone_number}")
                return False

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            now = datetime.now()
            hour = now.hour
            minute = (now.minute + 2) % 60

            print(f"üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ {phone} –≤ {hour}:{minute:02d}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            pywhatkit.sendwhatmsg(phone, message, hour, minute, 15, True, 2)

            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {phone}")
            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {phone_number}: {e}")
            return False

    def format_phone_number(self, phone):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        if pd.isna(phone):
            return None

        phone_str = str(phone).strip()
        cleaned = ''.join(filter(str.isdigit, phone_str))

        if cleaned.startswith('8') and len(cleaned) == 11:
            return '+7' + cleaned[1:]
        elif cleaned.startswith('7') and len(cleaned) == 11:
            return '+' + cleaned
        elif len(cleaned) == 10:
            return '+7' + cleaned
        elif cleaned.startswith('870') and len(cleaned) == 11:
            return '+7' + cleaned[2:]
        else:
            print(f"–°—Ç—Ä–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {cleaned}")
            return '+' + cleaned

    def run_campaign(self, delay_minutes=5):
        if not self.load_data():
            return

        results = []

        for index, row in self.df.iterrows():
            try:
                print(f"\n –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {index + 1}/{len(self.df)}: {row['name']}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if pd.isna(row.get('phone_number')):
                    print("–Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                    continue

                if pd.isna(row.get('name')):
                    print("–Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è")
                    continue

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
                location_type = self.analyze_location(
                    row['name'],
                    row.get('address', '')
                )
                print(f"–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞: {location_type}")

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = self.generate_message(
                    name=row['name'],
                    location_type=location_type,
                    address=row.get('address', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                )

                print(f"üí¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
                print("-" * 40)
                print(message)
                print("-" * 40)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ WhatsApp
                success = self.send_whatsapp_message(row['phone_number'], message)

                results.append({
                    'name': row['name'],
                    'phone': row['phone_number'],
                    'type': location_type,
                    'success': success,
                    'message_preview': message[:100] + '...'
                })

                if index < len(self.df) - 1:
                    delay_seconds = delay_minutes * 60
                    print(f"{delay_minutes} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º...")
                    time.sleep(delay_seconds)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {row['name']}: {e}")
                results.append({
                    'name': row['name'],
                    'phone': row.get('phone_number', 'N/A'),
                    'success': False,
                    'error': str(e)
                })

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nRESULTS:")
        print("=" * 50)
        successful = sum(1 for r in results if r['success'])
        print(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}/{len(results)}")

        for result in results:
            status = "Yes" if result['success'] else "No"
            print(f"{status} {result['name']} - {result.get('type', 'N/A')}")

        return results


#–ó–ê–ü–£–°–ö –ü–†–û–ì–†–ê–ú–ú–´
if __name__ == "__main__":
    CSV_FILE = "google_maps_–ê—Å—Ç–∞–Ω–∞_–ó–æ–Ω–∞_–æ—Ç–¥—ã—Ö–∞_20251019_082206.csv"

    # –°–æ–∑–¥–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é
    campaign = WhatsAppCampaign(CSV_FILE)

    print("–ó–ê–ü–£–°–ö WHATSAPP –ö–ê–ú–ü–ê–ù–ò–ò")
    print("=" * 30)

    #5 min
    results = campaign.run_campaign(delay_minutes=5)

    print(f"\nDone")
