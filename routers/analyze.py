# –ª–æ–≥–∏–∫–∞ ML –∞–Ω–∞–ª–∏–∑–∞
# –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–∞—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è,
# —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –æ–±—ä–µ–∫—Ç–æ–≤.

from fastapi import APIRouter
import pandas as pd
import os

router = APIRouter(prefix="/api/analyze", tags=["Analyze"])

# -------------------------------
#  –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
# -------------------------------
def calc_rating(row):
    name = str(row.get("name") or "").lower()
    category = str(row.get("category") or "").lower()
    score = 5

    # –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞, –ø–æ–≤—ã—à–∞—é—â–∏–µ —Ä–µ–π—Ç–∏–Ω–≥
    if any(k in name for k in ["–≥–ª—ç–º–ø–∏–Ω–≥", "camp", "glamp", "–∫–µ–º–ø–∏–Ω–≥", "—Ç—É—Ä–±–∞–∑–∞"]):
        score += 3
    if any(k in name for k in ["eco", "—ç–∫–æ"]):
        score += 1
    if any(k in name for k in ["mountain", "–≥–æ—Ä–∞", "altai", "shymbulak"]):
        score += 1
    if any(k in name for k in ["lux", "–ª—é–∫—Å", "–ø—Ä–µ–º–∏—É–º"]):
        score += 2
    if any(k in category for k in ["resort", "–æ—Ç–µ–ª—å", "–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞"]):
        score += 1

    return min(score, 10)


# -------------------------------
#  –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –º–µ—Ç—Ä–∏–∫
# -------------------------------
def calc_metrics(row):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º ‚Äî —á—Ç–æ–±—ã –Ω–µ –≤—Å–µ –±—ã–ª–∏ —Ö–æ–ª–æ–¥–Ω—ã–º–∏"""
    metrics = {}

    name = str(row.get("name") or "").lower()
    category = str(row.get("category_type") or "").lower()

    # === 1. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–µ—Ç–∏ ===
    social = str(row.get("social") or "") + " " + str(row.get("website") or "")
    metrics["activity_score"] = 1 if any(s in social for s in ["instagram", "facebook", "vk", "site"]) else 0

    # === 2. –ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö ===
    completeness_fields = ["contacts", "address", "description", "photos"]
    filled = sum(1 for f in completeness_fields if str(row.get(f) or "").strip())
    metrics["completeness_score"] = round((filled / len(completeness_fields)) * 2, 2)  # 0‚Äì2

    # === 3. –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (—Ä–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã) ===
    rating_val = float(row.get("rating_value") or 0)
    reviews = int(row.get("reviews_count") or 0)
    if rating_val >= 4 and reviews >= 10:
        metrics["popularity_score"] = 2
    elif rating_val >= 3.5 and reviews >= 3:
        metrics["popularity_score"] = 1
    else:
        metrics["popularity_score"] = 0.3

    # === 4. –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å / —Ü–µ–Ω–∞ ===
    capacity = int(row.get("rooms") or 0)
    price = float(row.get("price_avg") or 0)
    if capacity >= 20 or price >= 20000:
        metrics["capacity_score"] = 2
    elif capacity >= 10 or price >= 10000:
        metrics["capacity_score"] = 1
    else:
        metrics["capacity_score"] = 0.3

    # === 5. –ù–∏—à–∞  ===
    niche_bonus = {
        "–ª—é–∫—Å": 2,
        "—ç–∫–æ": 1.8,
        "—Å–µ–º–µ–π–Ω—ã–π": 1.5,
        "–≥–æ—Ä–Ω—ã–π": 1.5,
        "—ç—Ç–Ω–æ": 1.2,
        "—Å—Ç–∞–Ω–¥–∞—Ä—Ç": 0.8,
    }
    metrics["target_score"] = niche_bonus.get(category, 1)

    # === 6. –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª ===
    metrics["commercial_score"] = round(
        (metrics["completeness_score"] * 0.25 +
         metrics["activity_score"] * 0.25 +
         metrics["popularity_score"] * 0.25 +
         metrics["target_score"] * 0.25), 2
    )

    # === 7. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ ===
    weights = {
        "activity_score": 0.15,
        "completeness_score": 0.2,
        "popularity_score": 0.2,
        "capacity_score": 0.15,
        "target_score": 0.15,
        "commercial_score": 0.15,
    }

    weighted_sum = sum(metrics[m] * w for m, w in weights.items())
    total = round(weighted_sum * 6, 1) 
    metrics["final_rating"] = min(total, 10)

    # === 8. –°—Ä–æ—á–Ω–æ—Å—Ç—å ===
    if total >= 7.5:
        metrics["urgency"] = "üî• –ì–æ—Ä—è—á–∏–π –ª–∏–¥"
    elif total >= 5:
        metrics["urgency"] = "üü° –¢—ë–ø–ª—ã–π –ª–∏–¥"
    else:
        metrics["urgency"] = "‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ã–π –ª–∏–¥"

    return pd.Series(metrics)



# -------------------------------
#  –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# -------------------------------
def detect_category(cat):
    """
     –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä–µ–∫—Ç–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç:
     –≠–∫–æ / –≠—Ç–Ω–æ / –õ—é–∫—Å / –°–µ–º–µ–π–Ω—ã–π / –ì–æ—Ä–Ω—ã–π / –°—Ç–∞–Ω–¥–∞—Ä—Ç
     """
    cat = str(cat or "").lower()
    if any(k in cat for k in ["—ç–∫–æ", "eco"]):
        return "–≠–∫–æ"
    elif any(k in cat for k in ["—é—Ä—Ç–∞", "—ç—Ç–Ω–æ"]):
        return "–≠—Ç–Ω–æ"
    elif any(k in cat for k in ["–≥–ª—ç–º–ø–∏–Ω–≥", "lux", "–ª—é–∫—Å", "–ø—Ä–µ–º–∏—É–º"]):
        return "–õ—é–∫—Å"
    elif any(k in cat for k in ["–≥–æ—Å—Ç–µ–≤–æ–π", "—Å–µ–º–µ–π–Ω—ã–π"]):
        return "–°–µ–º–µ–π–Ω—ã–π"
    elif any(k in cat for k in ["–≥–æ—Ä–∞", "mountain"]):
        return "–ì–æ—Ä–Ω—ã–π"
    else:
        return "–°—Ç–∞–Ω–¥–∞—Ä—Ç"


# -------------------------------
#  –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –∞–Ω–∞–ª–∏–∑–∞
# -------------------------------
@router.get("/")
def analyze_data():
    """
     –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:
     1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π CSV-—Ñ–∞–π–ª —Å –æ–±—ä–µ–∫—Ç–∞–º–∏.
     2. –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∏ –≥–æ—Ä–æ–¥—É.
     3. –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏.
     4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π CSV –≤ /data/processed.
     """
    input_file = "data/raw/places.csv"
    output_file = "data/processed/analyzed.csv"
    query_file = "data/meta/last_query.txt"
    city_file = "data/meta/last_city.txt"

    if not os.path.exists(input_file):
        return {"error": f"–§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ /api/places."}

    df = pd.read_csv(input_file)
    if df.empty:
        return {"warning": "–§–∞–π–ª –ø—É—Å—Ç, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."}

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å
    current_query = ""
    if os.path.exists(query_file):
        with open(query_file, "r", encoding="utf-8") as f:
            current_query = f.read().strip().lower()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥
    current_city = ""
    if os.path.exists(city_file):
        with open(city_file, "r", encoding="utf-8") as f:
            current_city = f.read().strip().lower()

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É
    if "query" in df.columns and current_query:
        df = df[df["query"].str.lower() == current_query]

    # –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    theme_keywords = ["–≥–ª—ç–º–ø–∏–Ω–≥", "–∫–µ–º–ø–∏–Ω–≥", "—Ç—É—Ä–±–∞–∑–∞", "–æ—Ç–¥—ã—Ö", "camp", "glamp", "resort"]
    if current_query:
        theme_keywords.append(current_query)
    df = df[df["name"].str.lower().apply(lambda x: any(k in x for k in theme_keywords))]

    # –†–∞—Å—á—ë—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –º–µ—Ç—Ä–∏–∫
    df["rating"] = df.apply(calc_rating, axis=1)
    df["category_type"] = df["category"].apply(detect_category)
    metrics_df = df.apply(calc_metrics, axis=1)
    df = pd.concat([df, metrics_df], axis=1)

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = df.drop_duplicates(subset=["name", "address"])
    df = df.dropna(subset=["name"])
    df = df[df["name"].str.strip() != ""]

    #  –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π)
    if "city" in df.columns and current_city:
        df = df[df["city"].str.lower() == current_city]

    #  –¢–æ–ø-5 –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    df = df.sort_values(by="rating", ascending=False).head(5)

    df = df.fillna("")
    os.makedirs("data/processed", exist_ok=True)
    df.to_csv(output_file, index=False)

    print(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω: {len(df)} –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_file}")
    print(f"üóÇ –¢–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞: {current_query or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'} | –ì–æ—Ä–æ–¥: {current_city or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")

    return {
        "status": "done",
        "query": current_query,
        "city": current_city,
        "count": len(df),
        "output": output_file,
        "sample": df.head(3).to_dict(orient="records")
    }

