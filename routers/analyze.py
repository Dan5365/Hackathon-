# –ª–æ–≥–∏–∫–∞ ML –∞–Ω–∞–ª–∏–∑–∞

from fastapi import APIRouter
import pandas as pd
import os

router = APIRouter(prefix="/api/analyze", tags=["Analyze"])

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
def calc_rating(row):
    name = str(row.get("name") or "").lower()
    category = str(row.get("category") or "").lower()
    score = 5

    # –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞, –ø–æ–≤—ã—à–∞—é—â–∏–µ —Ä–µ–π—Ç–∏–Ω–≥
    if any(k in name for k in ["–≥–ª—ç–º–ø–∏–Ω–≥", "camp", "glamp", "–∫–µ–º–ø–∏–Ω–≥", "—Ç—É—Ä–±–∞–∑–∞"]):
        score += 3
    if any(k in name for k in ["eco", "—ç–∫–æ"]):
        score += 1
    if any(k in name for k in ["mountain", "–≥–æ—Ä–∞", "altai", "shymbulak"]):
        score += 1
    if any(k in name for k in ["lux", "–ª—é–∫—Å", "–ø—Ä–µ–º–∏—É–º"]):
        score += 2
    if any(k in category for k in ["resort", "–æ—Ç–µ–ª—å", "–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞"]):
        score += 1

    return min(score, 10)


# üîπ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def detect_category(cat):
    cat = str(cat or "").lower()
    if any(k in cat for k in ["—ç–∫–æ", "eco"]):
        return "–≠–∫–æ"
    elif any(k in cat for k in ["—é—Ä—Ç–∞", "—ç—Ç–Ω–æ"]):
        return "–≠—Ç–Ω–æ"
    elif any(k in cat for k in ["–≥–ª—ç–º–ø–∏–Ω–≥", "lux", "–ª—é–∫—Å", "–ø—Ä–µ–º–∏—É–º"]):
        return "–õ—é–∫—Å"
    elif any(k in cat for k in ["–≥–æ—Å—Ç–µ–≤–æ–π", "—Å–µ–º–µ–π–Ω—ã–π"]):
        return "–°–µ–º–µ–π–Ω—ã–π"
    elif any(k in cat for k in ["–≥–æ—Ä–∞", "mountain"]):
        return "–ì–æ—Ä–Ω—ã–π"
    else:
        return "–°—Ç–∞–Ω–¥–∞—Ä—Ç"


@router.get("/")
def analyze_data():
    input_file = "data/raw/places.csv"
    output_file = "data/processed/analyzed.csv"
    query_file = "data/meta/last_query.txt"

    if not os.path.exists(input_file):
        return {"error": f"–§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ /api/places."}

    df = pd.read_csv(input_file)
    if df.empty:
        return {"warning": "–§–∞–π–ª –ø—É—Å—Ç, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."}

    # üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –∏–∑ /api/places
    current_query = ""
    if os.path.exists(query_file):
        with open(query_file, "r", encoding="utf-8") as f:
            current_query = f.read().strip().lower()

    # üîπ –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞–ø—Ä–æ—Å—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≥–ª—ç–º–ø–∏–Ω–≥')
    if "query" in df.columns and current_query:
        df = df[df["query"].str.lower() == current_query]

    # üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    theme_keywords = [
        "–≥–ª—ç–º–ø–∏–Ω–≥", "–∫–µ–º–ø–∏–Ω–≥", "—Ç—É—Ä–±–∞–∑–∞", "–æ—Ç–¥—ã—Ö", "camp", "glamp", "resort"
    ]
    if current_query:
        theme_keywords.append(current_query)
    df = df[df["name"].str.lower().apply(lambda x: any(k in x for k in theme_keywords))]

    # üîπ –†–∞—Å—á—ë—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    df["rating"] = df.apply(calc_rating, axis=1)
    df["category_type"] = df["category"].apply(detect_category)

    # üîπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = df.drop_duplicates(subset=["name", "address"])
    df = df.dropna(subset=["name"])
    df = df[df["name"].str.strip() != ""]

    # üîπ –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ city)
    if "city" in df.columns:
        df = df[df["city"].str.lower() == "–∞–ª–º–∞—Ç—ã"]

    # üîπ –¢–æ–ø-5 –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    df = df.sort_values(by="rating", ascending=False).head(5)

    df = df.fillna("")
    os.makedirs("data/processed", exist_ok=True)
    df.to_csv(output_file, index=False)

    print(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω: {len(df)} –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_file}")
    print(f"üóÇ –¢–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞: {current_query or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}")

    return {
        "status": "done",
        "query": current_query,
        "count": len(df),
        "output": output_file,
        "sample": df.head(3).to_dict(orient="records")
    }
