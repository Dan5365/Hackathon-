# routers/generate.py
from fastapi import APIRouter
import os, asyncio, time, json, re
from dotenv import load_dotenv
import pandas as pd
import google.generativeai as genai
from datetime import datetime

load_dotenv()
router = APIRouter(prefix="/api/generate", tags=["AI Descriptions"])
genai.configure(api_key=os.getenv("GEMINI_API_KEY", "AIzaSyDT7vLvYPpM_qJ6U3fEskxmIMKizl3uwDk"))

INPUT_FILE = "data/processed/analyzed.csv"
OUTPUT_FILE = "data/processed/final.csv"

# -------------------------------------------------------------------
#  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å —Ç—Ä–µ–±—É–µ–º—ã–º JSON-—Ñ–æ—Ä–º–∞—Ç–æ–º
# -------------------------------------------------------------------
async def generate_extended_description(model, name, category, address, niche, index, total):
    """
     –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç—Ä–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Å—Ç–∞:
       - seo_title
       - short_description
       - description

     –†–∞–±–æ—Ç–∞–µ—Ç —Å Google Gemini, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å JSON.
     """


    prompt = f"""
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. 
–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Å—Ç–∞ ¬´{name}¬ª.

–í—ã–≤–µ–¥–∏ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
  "seo_title": "–ö–æ—Ä–æ—Ç–∫–∏–π SEO-–∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–æ 80 —Å–∏–º–≤–æ–ª–æ–≤, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫)",
  "short_description": "1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤), –∂–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑",
  "description": "–†–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (150‚Äì300 —Å–ª–æ–≤), –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ, –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –¥–ª—è —Å–∞–π—Ç–∞"
}}

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
- –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
- –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}
- –ê–¥—Ä–µ—Å: {address or "–Ω–µ —É–∫–∞–∑–∞–Ω"}
- –ù–∏—à–∞: {niche or "–æ–±—â–∞—è —Ç—É—Ä–∏–∑–º/–æ—Ç–¥—ã—Ö"}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ò–∑–±–µ–≥–∞–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–≤–¥–∞–ª–∏ –æ—Ç –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–µ—Ç—ã", "–æ—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è", "—É—é—Ç–Ω—ã–π —É–≥–æ–ª–æ–∫").
- –ö–∞–∂–¥—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –∑–≤—É—á–∞—Ç—å –ø–æ-—Ä–∞–∑–Ω–æ–º—É: –º–µ–Ω—è–π —Å—Ç–∏–ª—å, —Ä–∏—Ç–º –∏ –ª–µ–∫—Å–∏–∫—É.
- –ü–µ—Ä–µ–¥–∞–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª–∏ (—á—Ç–æ —á–µ–ª–æ–≤–µ–∫ —á—É–≤—Å—Ç–≤—É–µ—Ç, –≤–∏–¥–∏—Ç, —Å–ª—ã—à–∏—Ç –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ).
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã –∏ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–ª–∏—à–µ.
- –°—Ç–∏–ª—å: –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, —á–µ–ª–æ–≤–µ—á–Ω—ã–π, —Å –ª—ë–≥–∫–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏, –Ω–æ –±–µ–∑ –ø–∞—Ñ–æ—Å–∞.
- –ú–æ–∂–Ω–æ —Å–ª–µ–≥–∫–∞ –º–µ–Ω—è—Ç—å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π, –ø—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–π, —Å–µ–º–µ–π–Ω—ã–π, –¥–µ–ª–æ–≤–æ–π ‚Äî –µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
- –ù–µ —É–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å–∞–π—Ç.

"""


    for attempt in range(3):
        try:
            print(f"üîπ [{index}/{total}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {name} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")

            response = await asyncio.to_thread(
                model.generate_content,
                prompt,
                generation_config={"max_output_tokens": 800}
            )
            text = getattr(response, "text", "").strip()

            # --- –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞ ---
            match = re.search(r"\{.*\}", text, re.DOTALL)
            if match:
                try:
                    data = json.loads(match.group(0))
                   
                    return {
                        "title": data.get("seo_title", "").strip(),
                        "short": data.get("short_description", "").strip(),
                        "description": data.get("description", "").strip()
                    }
                except Exception:
                    pass

            # --- fallback: –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é ---
            lines = [l.strip() for l in text.split("\n") if l.strip()]
            title = lines[0][:80] if lines else ""
            short = lines[1][:200] if len(lines) > 1 else ""
            desc = " ".join(lines[2:]) if len(lines) > 2 else text
            return {"title": title, "short": short, "description": desc}
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É {name}: {e}")
            if "429" in str(e).lower():
                await asyncio.sleep(2 * (attempt + 1))
                continue
    return {"title": "", "short": "", "description": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."}


# -------------------------------------------------------------------
#  –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π
# -------------------------------------------------------------------
@router.get("/")
async def generate_descriptions(limit: int = 5):
    if not os.path.exists(INPUT_FILE):
        return {"error": f"–§–∞–π–ª {INPUT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ /api/analyze."}

    print("\nüöÄ [START] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π —á–µ—Ä–µ–∑ Gemini...")
    start_time = time.time()

    df = pd.read_csv(INPUT_FILE).head(limit)
    if df.empty:
        return {"warning": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."}

    model = genai.GenerativeModel("gemini-2.5-flash-lite")

    tasks = [
        generate_extended_description(
            model,
            row.get("name", "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç"),
            row.get("category_type", "–†–∞–∑–º–µ—â–µ–Ω–∏–µ"),
            row.get("address", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"),
            row.get("niche", "–≠–∫–æ—Ç—É—Ä–∏–∑–º"),
            i + 1, len(df)
        )
        for i, row in df.iterrows()
    ]

    results = await asyncio.gather(*tasks)

    df["seo_title"] = [r["title"] for r in results]
    df["short_description"] = [r["short"] for r in results]
    df["description"] = [r["description"] for r in results]

    os.makedirs("data/processed", exist_ok=True)
    df.to_csv(OUTPUT_FILE, index=False, encoding="utf-8")

    elapsed = round(time.time() - start_time, 2)
    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed} —Å–µ–∫—É–Ω–¥. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {OUTPUT_FILE}")

    return {
        "status": "done",
        "count": len(df),
        "output": OUTPUT_FILE,
        "time_sec": elapsed,
        "sample": df[["name", "seo_title", "short_description"]].head(2).to_dict(orient="records")
    }


# -------------------------------------------------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (Outreach)
# -------------------------------------------------------------------

@router.get("/outreach")
async def generate_outreach_template(name: str, niche: str, location: str, channel: str = "email"):
    model = genai.GenerativeModel("gemini-2.5-flash-lite")
    prompt = f"""
–¢—ã ‚Äî –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ mytravel.kz. –°–æ—Å—Ç–∞–≤—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞.

–§–æ—Ä–º–∞—Ç:
{{
  "greeting": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
  "body": "–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å –ø–æ–ª—å–∑–æ–π –∏ CTA",
  "signature": "–ö–æ–º–∞–Ω–¥–∞ mytravel.kz"
}}

–ö–∞–Ω–∞–ª: {channel}
–ù–∞–∑–≤–∞–Ω–∏–µ: {name}
–õ–æ–∫–∞—Ü–∏—è: {location}
–ù–∏—à–∞: {niche}

–ü—Ä–∏–º–µ—Ä CTA: "–•–æ—Ç–∏–º –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –∫–∞—Ç–∞–ª–æ–≥. –ú–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?"
–ü–∏—à–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.
"""

    try:
        response = await asyncio.to_thread(model.generate_content, prompt)
        text = getattr(response, "text", "")
        match = re.search(r"\{.*\}", text, re.DOTALL)
        if match:
            data = json.loads(match.group(0))
            return data
    except Exception as e:
        return {"error": str(e)}

    return {"greeting": "–ü—Ä–∏–≤–µ—Ç!", "body": "–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏ –≤–∞—à –æ–±—ä–µ–∫—Ç –∏ —Ö–æ—Ç–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å.", "signature": "–ö–æ–º–∞–Ω–¥–∞ mytravel.kz"}

@router.get("/outreach_ab")
async def generate_outreach_ab(name: str, niche: str, location: str):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞ (A –∏ B) –¥–ª—è A/B —Ç–µ—Å—Ç–∞.
    """
    model = genai.GenerativeModel("gemini-2.5-flash-lite")

    variants = []
    for variant in ["A", "B"]:
        prompt = f"""
        –¢—ã ‚Äî –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ mytravel.kz.
        –°–æ—Å—Ç–∞–≤—å –≤–µ—Ä—Å–∏—é {variant} —à–∞–±–ª–æ–Ω–∞ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞.

        –§–æ—Ä–º–∞—Ç:
        {{
          "variant": "{variant}",
          "greeting": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
          "body": "–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å –ø–æ–ª—å–∑–æ–π –∏ CTA",
          "signature": "–ö–æ–º–∞–Ω–¥–∞ mytravel.kz"
        }}

        –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
        –õ–æ–∫–∞—Ü–∏—è: {location}
        –ù–∏—à–∞: {niche}
        """

        response = await asyncio.to_thread(model.generate_content, prompt)
        text = getattr(response, "text", "")
        match = re.search(r"\{.*\}", text, re.DOTALL)
        data = json.loads(match.group(0)) if match else {"variant": variant, "body": text}
        variants.append(data)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    os.makedirs("data", exist_ok=True)
    with open("data/outreach_tests.json", "w", encoding="utf-8") as f:
        json.dump(variants, f, ensure_ascii=False, indent=2)

    return {"status": "done", "variants": variants}

