
# routers/generate.py
from fastapi import APIRouter
import os, asyncio, time
from dotenv import load_dotenv
import pandas as pd
import google.generativeai as genai
from datetime import datetime

load_dotenv()
router = APIRouter(prefix="/api/generate", tags=["AI Descriptions"])

# üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
genai.configure(api_key=os.getenv("GEMINI_API_KEY", "AIzaSyDT7vLvYPpM_qJ6U3fEskxmIMKizl3uwDk"))

# üìÅ –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
INPUT_FILE = "data/processed/analyzed.csv"
OUTPUT_FILE = "data/processed/final.csv"

# --- üß† –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è ---
async def generate_single(model, name, category, address, index, total):
    prompt = (
        f"–ù–∞–ø–∏—à–∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ '{name}' –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ.\n"
        f"–¢–∏–ø: {category}. –ê–¥—Ä–µ—Å: {address}.\n"
        f"–°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç 150‚Äì200 —Å–ª–æ–≤, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –∂–∏–≤–æ–π, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Å–∞–π—Ç–∞ mytravel.kz.\n"
        f"–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–≤—Ç–æ—Ä–æ–≤, —Å–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –ª—ë–≥–∫–∏–º –¥–ª—è —á—Ç–µ–Ω–∏—è."
    )

    for attempt in range(3):
        try:
            print(f"üîπ [{index}/{total}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {name} ‚Äî –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}")
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –±–ª–æ–∫–∏—Ä—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
            response = await asyncio.to_thread(
                model.generate_content,
                prompt,
                generation_config={"max_output_tokens": 400}
            )
            if response and hasattr(response, "text"):
                return response.text.strip()
            return "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å."
        except Exception as e:
            err = str(e)
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É {name}: {err}")
            if "429" in err or "rate" in err.lower():
                await asyncio.sleep(2 * (attempt + 1))
                continue
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}"

    return "–û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫."


# --- üöÄ –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç ---
@router.get("/")
async def generate_descriptions(limit: int = 5):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è.
    """
    if not os.path.exists(INPUT_FILE):
        return {"error": f"–§–∞–π–ª {INPUT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ /api/analyze."}

    print("\nüöÄ [START] –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Gemini...")
    start_time = time.time()

    # --- –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ ---
    df = pd.read_csv(INPUT_FILE).head(limit)
    if df.empty:
        return {"warning": "–§–∞–π–ª –ø—É—Å—Ç, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."}

    model = genai.GenerativeModel("gemini-2.5-flash-lite")

    # --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ ---
    tasks = [
        generate_single(
            model,
            row.get("name", "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç"),
            row.get("category_type", "–û–±—ä–µ–∫—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"),
            row.get("address", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"),
            i + 1, len(df)
        )
        for i, row in df.iterrows()
    ]

    # --- –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ ---
    results = await asyncio.gather(*tasks)

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
    df["description"] = results

    success_count = sum(1 for r in results if "–û—à–∏–±–∫–∞" not in r)
    fail_count = len(results) - success_count

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º ---
    os.makedirs("data/processed", exist_ok=True)
    df.to_csv(OUTPUT_FILE, index=False, encoding="utf-8")

    elapsed = round(time.time() - start_time, 2)
    timestamp = datetime.now().strftime("%H:%M:%S")

    print("\nüèÅ [FINISH] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count} | ‚ùå –û—à–∏–±–æ–∫: {fail_count}")
    print(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {OUTPUT_FILE}")
    print(f"üïì –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed} —Å–µ–∫—É–Ω–¥\n")

    # --- –í–æ–∑–≤—Ä–∞—Ç JSON ---
    return {
        "status": "done",
        "count": len(df),
        "success": success_count,
        "failed": fail_count,
        "output": OUTPUT_FILE,
        "time_sec": elapsed,
        "finished_at": timestamp,
        "sample": df[["name", "description"]].head(2).to_dict(orient="records"),
    }
